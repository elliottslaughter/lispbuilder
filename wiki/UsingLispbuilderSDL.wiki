#summary LISPBUILDER-SDL User Guide

<wiki:toc max_depth="3" />

= Introduction =
== Initialisation of SDL ==

The SDL library and SDL subsystems must be initialized prior to use. This is handled automatically when using the macro [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WITH-INIT]. 
[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WITH-INIT] also uninitialises the SDL library upon exit.

More detailed information on the LISPBUILDER-SDL initialisation process can be found in the documentation for [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WITH-INIT].

{{{
(WITH-INIT (SDL-INIT-VIDEO)
  ...)
}}}

== Creation of the SDL Window==

A window must be created to display any kind of output. A window of a specific pixel width and height is created using the function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WINDOW]. [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WINDOW] takes additional keyword parameters to set the requested video mode, color bit depth, the window title and the icon title.
	  
More detailed information can be found in in the documentation for [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html WINDOW].

{{{
(WITH-INIT (SDL-INIT-VIDEO)
  (WINDOW 320 240))
}}}

=== Handling Events and the Game Loop ===

LISPBUILDER-SDL provides the [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] macro that simplifies the game loop and handling of SDL events. Event handlers are defined by specifying the event type a well as an optional list of fields specific to that event.

More detailed information on all SDL events (Keyboard events, Joystick events, User events etc.) can be found in in the documentation for [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS]. For example, to process the current x and y mouse position when the mouse is moved:

{{{
(:MOUSE-MOTION-EVENT (:X X-POS :Y Y-POS)
  ...)
}}}

Or to process the x and y relative mouse positions when the mouse is moved:

{{{
(:MOUSE-MOTION-EVENT (:X-REL relative-x :Y-REL relative-y)
  ...)
}}}

The only event that must be handled with [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] is the `:QUIT-EVENT`. If `:QUIT-EVENT` is ignored then it is impossible for the user to close the SDL Window or exit the game loop.

{{{
(WITH-EVENTS ()
  (:QUIT-EVENT () T)
  (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
    ...))
}}}

In addition to handling events, [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] also manages the game loop. Introducing the `:IDLE` event. `:IDLE`, although not technically an actual event, is executed once per game loop after all events have been processed in the SDL event queue. `:IDLE` is where the user can place code that needs to be executed once per game loop and that is not 'event' driven. This code may involve updating world physics, updating the state of game objects and rendering sprites to the display.

{{{
(WITH-EVENTS ()
  (:QUIT-EVENT () T)
  (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
    ...)
  (:IDLE ()
    (UPDATE-DISPLAY)))
}}}

[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] can also limit execution of the the game loop to a specific number of iterations a second using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#frame-rate FRAME-RATE]. This effectively limits the number of frames displayed per second. To set the frame rate to 60 frames per second, 

{{{
(SETF (SDL:FRAME-RATE) 60)
}}}

To unlock the frame rate effectively running the game loop as fast as the CPU will allow set the FRAME-RATE to `0`; 

{{{
(SETF (SDL:FRAME-RATE) NIL)
}}}

The SDL display surface needs to be updated once per game loop, as described in the section [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html SDL Display].

{{{
(SETF (FRAME-RATE) 30)
(WITH-EVENTS ()
  ...)
}}}

== Primitives ==

LISPBUILDER-SDL supports [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle RECTANGLE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#color COLOR] primitives. These are described below.

=== Rectangle ===

A new rectangle is created by the function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle RECTANGLE]. The function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-from-edges RECTANGLE-FROM-EDGES] will create a new rectangle from the specified top left and bottom right coordinates. The function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-from-midpoint-* RECTANGLE-FROM-MIDPOINT-*] will create a new rectangle from midpoint.

The macros [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-rectangle WITH-RECTANGLE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-rectangle WITH-RECTANGLEs] will create a new rectangle and free this rectangle when it goes out of scope. 

The rectangle position and width and height can be inspected and modified using the following functions: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x X], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y Y], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#width WIDTH] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#height HEIGHT]. [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x2 X2] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y2 Y2] will return the `(+ x width)` and `(+ y height)` of the rectangle respectively.

Additional functions that operate on rectangles are as follows:

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html POINT-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html GET-POINT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html SET-POINT
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html GET-POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html RECTANGLE-*] 
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html GET-RECTANGLE]
* [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html SET-RECTANGLE]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html DRAW-BOX 
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html DRAW-RECTANGLE]

=== Color ===
	<p>
	  A new SDL color is created by <a href="#color">COLOR</a>, returning either a new RGB or RGBA color. 
	</p>
	<p>
	  RGB/A color componets can be manipulated using the functions <a href="#r">R</a>, <a href="#g">G</a>, 
	  <a href="#b">B</a>, <a href="#a">A</a>, <a href="#set-color">SET-COLOR</a> and 
	  <a href="#set-color-*">SET-COLOR-*</a>. Two colors may be compared using <a href="#color=">COLOR=</a>.
	</p>
	<p>
	  Functions that accept a color parameter will most likely bind color to 
	  <a href="#*default-color*">*DEFAULT-COLOR*</a> when unspecified. The macro
	  <a href="#with-font">WITH-COLOR</a> will bind a color to <a href="#*default-color*">*DEFAULT-COLOR*</a> 
	  within the scope of this macro. When <a href="#*default-color*">*DEFAULT-COLOR*</a> is bound to a color, 
	  all subsequent drawing functions will use this implied color while it remains in scope.
	</p>
	<p>
	  Additional functions that operate on colors are as follows:
	  <ul>
	    <li><a href="#color-*">COLOR-*</a></li>
	    <li><a href="#any-color-but-this">ANY-COLOR-BUT-THIS</a></li>
	    <li><a href="#map-color">MAP-COLOR</a></li>
	    <li><a href="#pack-color">PACK-COLOR</a></li>
	  </ul>
	</p>
	<p>
	  LISPBULDER-SDL contains several predefined colors; <a href="#*black*">*BLACK*</a>, 
	  <a href="#*white*">*WHITE*</a>, <a href="#*red*">*RED*</a>, <a href="#*green*">*GREEN*</a>,
	  <a href="#*blue*">*BLUE*</a>, <a href="#*yellow*">*YELLOW*</a>, <a href="#*cyan*">*CYAN*</a>,
	  <a href="#*magenta*">*MAGENTA*</a>.
	</p>


	<h3><a class=none name="devdraw">Drawing</a></h3>
	<p>
	  LISPBUILDER-SDL provides low-level drawing support for several primitives. Most primitives can be drawn
	  with or without alpha transparency. In addition, the filled primitives can be drawn with a single pixel 
	  outline (or stroke) that is a different color to the fill color.
	  <ul>
     	    <li>Blitting Surfaces: <a href="#draw-surface">DRAW-SURFACE</a> and
	    <a href="#blit-surface">BLIT-SURFACE</a></li>
	    <li>Bezier and Cutmull-Rom Curves: <a href="#draw-bezier">DRAW-BEZIER</a>, 
	      <a href="#draw-shape">DRAW-SHAPE</a>, <a href="#with-bezier">WITH-BEZIER</a>, 
	      <a href="#with-curve">WITH-CURVE</a> and <a href="#draw-curve">DRAW-CURVE</a>.</li>
	    <li>Boxes and Rectangles: <a href="#draw-box">DRAW-BOX</a>, 
	      <a href="#draw-rectangle">DRAW-RECTANGLE</a></li>
	    <li>Circles: <a href="#draw-circle">DRAW-CIRCLE</a> and 
	      <a href="#draw-filled-circle">DRAW-FILLED-CIRCLE</a></li>
	    <li>Lines: <a href="#draw-hline">DRAW-HLINE</a>, <a href="#draw-vline">DRAW-VLINE</a> and
   	      <a href="#draw-line">DRAW-LINE</a></li>
	    <li>Points: <a href="#draw-point">DRAW-POINT</a></li>
       	    <li>Polygons and Triangles: <a href="#draw-polygon">DRAW-POLYGON</a>,
	      <a href="#draw-trigon">DRAW-TRIGON</a> and <a href="#with-shape">WITH-SHAPE</a></li>
       	    <li>Filling Surfaces with Color: <a href="#fill-surface">FILL-SURFACE</a></li>
	    <li>Filling Arbitrary Shapes with Color: <a href="#flood-fill">FLOOD-FILL</a></li>
	  </ul>
	</p>
	<p>
	  Drawing functions require a target surface and color. LISPBUILDER-SDL uses defaults for both 
	  target surface (<a href="#*default-surface*">*DEFAULT-SURFACE*</a>) and color 
	  (<a href="#*default-color*">*DEFAULT-COLOR*</a>) unless these are otherwise specified by the user. 
	  The macros <a href="#with-surface">with-surface</a>, and 
	  <a href="#with-surfaces">with-surfaces</a> will bind a surface to <A HREF="#*DEFAULT-SURFACE*">*DEFAULT-SURFACE*</A> within the scope these
	  macros. For example, instead of specifying a target surface for each draw-* function a user may bind 
	  <A HREF="#*DEFAULT-SURFACE*">*DEFAULT-SURFACE*</A> to a surface once and subsequent draw-* functions will use this implied surface 
	  while it remains in scope.
	</p>
	  <pre>
(DRAW-POINT (sdl:point :x x1 :y y1) :surface a-surface :color *white*)
(DRAW-POINT (sdl:point :x x2 :y y2) :surface a-surface :color *white*)	    
(DRAW-POINT (sdl:point :x x3 :y y3) :surface a-surface :color *white*)
(DRAW-POINT (sdl:point :x x4 :y y4) :surface a-surface :color *white*)
	  </pre>

	<p>Now, we use <a href="#with-surface">WITH-SURFACE</a> to bind a surface to <A HREF="#*DEFAULT-SURFACE*">*DEFAULT-SURFACE*</A>.</p>

	  <pre>
(WITH-SURFACE (a-surface)
  (DRAW-POINT (sdl:point :x x1 :y y1) :color *white*)
  (DRAW-POINT (sdl:point :x x2 :y y2) :color *white*)
  (DRAW-POINT (sdl:point :x x3 :y y3) :color *white*)
  (DRAW-POINT (sdl:point :x x4 :y y4) :color *white*))
	  </pre>

	  <p>
	    We can use <a href="#with-color">WITH-COLOR</a> to bind <A HREF="#*DEFAULT-COLOR*">*DEFAULT-COLOR*</A> to 
	    <a href="#*white*">*WHITE*</a>:
	  </p>
	  
	  <pre>
(WITH-SURFACE (a-surface)
  (WITH-COLOR (*white*)
    (DRAW-POINT (sdl:point :x x1 :y y1))
    (DRAW-POINT (sdl:point :x x2 :y y2))
    (DRAW-POINT (sdl:point :x x3 :y y3))
    (DRAW-POINT (sdl:point :x x4 :y y4)))
	  </pre>

	<p>
	  Finally, if the target surface is the display then <A HREF="#WITH-SURFACE">*WITH-SURFACE*</A> is not required as :SURFACE when NIL 
	  will be bound to <A HREF="#*DEFAULT-DISPLAY*">*DEFAULT-DISPLAY*</A> as a default. So the above code can be shortened as follows:
	</p>

	  <pre>
(WITH-COLOR (*white*)
  (DRAW-POINT (sdl:point :x x1 :y y1))
  (DRAW-POINT (sdl:point :x x2 :y y2))
  (DRAW-POINT (sdl:point :x x3 :y y3))
  (DRAW-POINT (sdl:point :x x4 :y y4)))
	  </pre>

	<h3><a class=none name="font">Fonts</a></h3>
	<p>
	  LISPBUILDER-SDL contains several bitmap fonts of different sizes and faces (italics/bolded). See
	  <a href="#initialise-font">INITIALISE-FONT</a> for the complete list of built-in fonts. 
	</p>
	<h4><a class=none name="fontinit">Initialisation</a></h3>
	<p>
	  Fonts are initialised using <a href="#initialise-default-font">INITIALISE-DEFAULT-FONT</a>, or 
	  <a href="#initialise-font">INITIALISE-FONT</a>. The resouces allocated to a font are freed by  
	  <a href="#free-font">FREE-FONT</a>. A font must be initialised prior to use.
	</p>
	<p>
	  LISPBUILDER-SDL provides the macros <a href="#with-default-font">WITH-DEFAULT-FONT</a> and 
	  <a href="#with-font">WITH-FONT</a> for the above functions that bind 
	  <a href="#*default-font*">*DEFAULT-FONT*</a> to font within the scope of the macro.
	<p>
	  
	<h4><a class=none name="fontrend">Rendering Text</a></h3>
	<p>
	  LISPBUILDER-SDL supports the rendering of colored text over a transparent background (Solid rendering), 
	  and the rendering of colored text over a solid colored background (Shaded rendering). Text may be left, right or 
	  center justified. Text can be drawn directly to a target surface using 
	  <a href="#draw-string-solid">DRAW-STRING-SOLID</a> and <a href="#draw-string-shaded">DRAW-STRING-SHADED</a>. 
	  Text can be rendered to a new surface of character height and string width using 
	  <a href="#render-string-solid">RENDER-STRING-SOLID</a> and 
	  <a href="#render-string-shaded">RENDER-STRING-SHADED</a>. This new surface may be optionally cached in the 
	  font object. A cached surface font can be accessed using <a href="#cached-surface">CACHED-SURFACE</a>) and can 
	  be blitted to a target surface using <a href="#draw-font">DRAW-FONT</a>.
	</p>
	<p>
	  The font rendering functions accept a font object. This font parameter is bound to
	  <a href="#*default-font*">*DEFAULT-FONT*</a> when unspecified. The function 
	  <a href="#initialise-default-font">INITIALISE-DEFAULT-FONT</a> and the macros
	  <a href="#with-font">WITH-FONT</a> and <a href="#with-default-font">WITH-DEFAULT-FONT</a> will bind a 
	  font to <a href="#*default-font*">*DEFAULT-FONT*</a> within the scope of these macros. When 
	  <a href="#*default-font*">*DEFAULT-FONT*</a> is bound to a font, all subsequent font drawing 
	  or font rendering functions will use this implied font while it remains in scope.
	</p>
	<p>The following methods also apply to fonts; <a href="#x">X</a>, <a href="#y">Y</a>,
	  <a href="#width">WIDTH</a>, <a href="#height">HEIGHT</a>, Returns the width of the cached [SURFACE](#surface) when `OBJ` is a [FONT](#font).
	<pre>
(WITH-COLOR (*WHITE*)
  (WITH-FONT (*FONT-8x8*)
    (DRAW-STRING-SOLID-* "Font is 8x8." 10 10)

    (WITH-FONT (*FONT-10x20*)
      (DRAW-STRING-SOLID-* "Font is 10x20." 10 20))

    (DRAW-STRING-SOLID-* "Font is 8x8 again." 10 40)))
	</pre>
	

	<h3><a class=none name="devsurf">Surfaces</a></h3>
	<p>
	</p>

	<h4><a class=none name="devsurfover">Overview of Surfaces</a></h4>
	<p>
	  An SDL surface, <a href="#surface">SURFACE</a>, represents an area of <em>graphical</em> memory 
	  that can be drawn or rendered to, for example the video framebuffer or an image that is loaded from disk.
	</p>

	<h4><a class=none name="devsurfcreat">Creating Surfaces</a></h4>
	<p>
	  A surface is created:
	  <ul>
	    <li>Automatically by the SDL library to represent a framebuffer by 
	  calling <a href="#window">WINDOW</a>.</li>
	    <li>When loading an image from disk using <a href="#load-image">LOAD-IMAGE</a>.</li>
	    <li>Explicitely using <a href="#create-surface">CREATE-SURFACE</a>, or 
	      <a href="#copy-surface">COPY-SURFACE</a>.</li>
	    <li>Implicitely using <a href="#convert-surface">CONVERT-SURFACE</a>.</li>
	  </ul>
	</p>
	<p>
	  Functions that accept a surface parameter will most likely bind surface to 
	  <a href="#*default-surface*">*DEFAULT-SURFACE*</a> when unspecified. 
	  The macros <a href="#with-surface">WITH-SURFACE</a> and <a href="#with-surfaces">WITH-SURFACES</a> will bind a 
	  surface to <a href="#*default-surface*">*DEFAULT-SURFACE*</a> within the scope of these macro. 
	  When <a href="#*default-surface*">*DEFAULT-SURFACE*</a> is bound to a surface, 
	  all subsequent drawing functions will use this implied surface while it remains in scope.
	</p>
	<p>
	  A surface can be explicitely freed by calling <a href="#free-surface">FREE-SURFACE</a>.
	</p>

	<h4><a class=none name="devsurfload">Images</a></h4>
	<p>
	  BMP images are loaded from disk using <a href="#load-image">LOAD-IMAGE</a>. Support for additional 
	  image formats is provided in the <a href="lispbuilder-sdl-image.html">LISPBUILDER-SDL-IMAGE</a> package. 
	  A surface is saved to disk as a BMP image using <a href="#save-image">SAVE-IMAGE</a>.
	</p>

	<pre>
(DRAW-SURFACE (LOAD-IMAGE "sdl.bmp") 
              :surface *default-display*)
	</pre>

	<h4><a class=none name="devsurfpos">Positioning Surfaces</a></h4>
	<p>
	  A <a href="#surface">SURFACE</a> stores its own position X/Y coordinates. These coordinates 
	  can be inspected and modified using the following functions: 
	  <a href="#x">X</a>, <a href="#y">Y</a>, <a href="#width">WIDTH</a> and <a href="#height">HEIGHT</a>. 
	</p>
	<p>
	  Additional functions and macros that manage surface coordinates are as follows: 
	  <ul>
	    <li><a href="#point-*">POINT-*</a></li>
	    <li><a href="#get-point">GET-POINT</a></li>
	    <li><a href="#set-point">SET-POINT</a></li>
	    <li><a href="#set-point-*">SET-POINT-*</a></li>
	    <li><a href="#position-*">POSITION-*</a></li>
	    <li><a href="#get-position">GET-POSITION</a></li>
	    <li><a href="#set-position-*">GET-POSITION</a></li>
	    <li><a href="#set-surface">SET-SURFACE</a></li>
	    <li><a href="#set-surface-*">SET-SURFACE-*</a></li>
	    <li><a href="#rectangle-*">RECTANGLE-*</a></li>
	    <li><a href="#get-rectangle-*">GET-RECTANGLE-*</a></li>
	    <li><a href="#get-surface-rect">GET-SURFACE-RECT</a></li>
	    <li><a href="#draw-surface-at">DRAW-SURFACE-AT</a></li>
	  </ul>
	</p>

	<h4><a class=none name="devsurfblit">Drawing & Blitting Surfaces</a></h4>
	<p>The functions <a href="#blit-surface">BLIT-SURFACE</a> and <a href="#draw-surface">DRAW-SURFACE</a> will 
	  blit or draw a source surface onto a destination surface using the position coordinates stored in the source surface.
	  <a href="#draw-surface-at">DRAW-SURFACE-AT</a> will draw the source surface at a specified position.
	</p>
	<p>
	  The composition rules that determine how the source surface is composed over the destination surface are 
	  described in the description of <a href="#blit-surface">BLIT-SURFACE</a>.
	  <a href="#fill-surface">FILL-SURFACE</a> fill will the target surface with a single color.
	  <a href="#devprim">Drawing Primitives</a> describes how <a href="#*default-surface*">*DEFAULT-SURFACE*</a> 
	  is used when calling blitting operations.
	</p>
	<p>
	  Use <a href="#set-color-key">SET-COLOR-KEY</a>, <a href="#clear-color-key">CLEAR-COLOR-KEY</a> and 
	  <a href="#set-alpha">SET-ALPHA</a> to modify the key color and alpha transparency properties of a surface after the 
	  surface has been created.
	</p>
	<p>
	  Set a <em>clipping</em> rectangle to limit the draw area on a destination surface. 
	  The clipping rectangle for a surface is manipulated using <a href="#get-clip-rect">GET-CLIP-RECT</a> and 
	  <a href="#set-clip-rect">SET-CLIP-RECT</a>. When this surface is the destination of a blit, 
	  only the area within the <em>clip</em> rectangle will be drawn into.
	</p>
	<p>
	  Set a <em>cell</em> rectangle to limit the surface area on the source surface.
	  The cell rectangle for a surface is manipulated using <a href="#clear-cell">CLEAR-CELL</a> and 
	  <a href="#set-cell">SET-CELL</a>. When this surface is the source of a blit, 
	  only the areas within the <em>cell</em> rectangle will be used. 
	  The cell is useful when only a small area of the source surface needs to be blitted to the destination surface. 
	  For example a sequence of images composed into a single sprite sheet and only the current frame of animation
	  is to be drawn to the display at any one time.
	</p>
	<p>
	  <img src="waddle.png" width="285" height="51" title="Sprite Sheet" alt="Sprite Sheet"/>
	</p>

	<h4><a class=none name="devupdate">Updating SDL Surfaces and the SDL Display</a></h4>
	<p>	  
	  The functions <a href="#update-display">UPDATE-DISPLAY</a> and <a href="#update-surface">UPDATE-SURFACE</a>
	  update the SDL display surface (or OpenGL context) and general SDL surfaces respectively.
	</p>

	<h3><a class=none name="devdisp">The SDL Display</a></h3>
	<p>  
	  The SDL display surface must be updated at least once each game loop using the function 
	  <a href="#update-display">UPDATE-DISPLAY</a>. This function will call 
	  <a href="#sdl-gl-swap-buffers">SDL-GL-SWAP-BUFFERS</a> to update the OpenGL display, 
	  or <a href="#sdl-flip">SDL-FLIP</a> to update the SDL surface depending on the current 
	  <a href="#*opengl-context*">*OPENGL-CONTEXT*</a>. The display can be filled with a background
	  color using <a href="#clear-display">CLEAR-DISPLAY</a>.
	</p>
	<p>
	  The properties of an SDL surface can be queried using <a href="#surface-info">SURFACE-INFO</a>.
	  The properties of the SDL display and video hardware can be queried using <a href="#video-info">VIDEO-INFO</a>.
	  The screen resolutions supported by a particular set of video flags can be retrieved using 
	  <a href="#list-modes">LIST-MODES</a>. A pointer to the native SDL window can be retrieved using
	  <a href="#get-native-window">GET-NATIVE-WINDOW</a>. The name of the video driver can be retrieved as a STRING 
	  using <a href="#video-driver-name">VIDEO-DRIVER-NAME</a>.

	<h3><a class=none name="devcursor">The Cursor</a></h3>
	<p>  
	  The the current state of the cursor is returned using <a href="#query-cursor">QUERY-CURSOR</a>, and is set using 
	  <a href="#query-cursor">SHOW-CURSOR</a>.
	</p>

	<h3><a class=none name="devex">Simple Example</a></h3>
	<p>
	  Putting this all together, we can write short example showing a white rectangle that follows the users mouse 
	  movements within an SDL Window. Exit the example by closing the window or pressing the Esc key on the keyboard.
	</p>

<pre>
;; Initialise SDL and the Video subsystem
(WITH-INIT (SDL-INIT-VIDEO) 
  (WINDOW 320 240)          ; Open a window, 320 x 240

  (SETF (FRAME-RATE) 30)    ; Lock the frame rate to 30 fps
  (WITH-EVENTS ()
    (:QUIT-EVENT () T)      ; Absolutely have to handle the :QUIT-EVENT

    (:KEY-DOWN-EVENT (:KEY key) (WHEN (KEY= key :SDL-KEY-ESCAPE) (PUSH-QUIT-EVENT)))

    (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
      (CLEAR-DISPLAY *black*)
      ;; Draw the box with center at the mouse x/y coordinates.
      (DRAW-BOX-* (- mouse-x (/ 50 2)) (- mouse-y (/ 50 2)) 50 50 :color *white*))

    (:IDLE ()
      (UPDATE-DISPLAY))))
</pre>


	<h3><a class=none name="devgarbage">Object Lifecycles and Garbage Collection</a></h3>
	<p>
	  ...
	</p>
	  	  


= Package Overview =

== Package Exports ==
Functions and symbols exported from the `LISPBUILDER-SDL` package are accessible using the `LISPBUILDER-SDL:` prefix or the shorter form `SDL:` nickname.

== Package Structure ==
The `cffi/` directory contains the raw CFFI bindings. These bindings may be automatically generated by [http://www.swig.org SWIG] or created by hand depending on the package. CFFI translation functions perform simple low-level conversions for example, converting Lisp strings to C strings and back (see [http://code.google.com/p/lispbuilder/source/browse/trunk/lispbuilder-sdl-image/cffi/translate.lisp `translate.lisp`] for example). 
All functions in `cffi/` accept and return foreign objects only.

The `base/` directory defines wrappers over the functions in `cffi/`. 
The functions in `base/` accept keyword arguments and accept `NIL` instead of `CFFI:NULL-POINTER` where appropriate. Generally functions in `base/` accept and return foreign objects. `base/` may perform some type checks `(IS-VALID-PTR SURFACE)` but this layer is meant to be lean. Someone who implements a graphics engine might use this layer instead of `sdl/` if speed is a concern. There are no fancy drawing primitives in this layer.

The `sdl/` directory defines the abstractions over `cffi/` and `base/`. Foreign objects are passed around `sdl/` neatly wrapped in CLOS objects, using [http://www.cliki.net/trivial-garbage `TRIVIAL-GARBAGE`] for automatic garbage collection (minimize foreign objects being left on the heap). There are no functions in `sdl/` that accept or return foreign objects (with the exception of the functions that create the CLOS wrapper objects). Functions in `sdl/` call down into `cffi/` and `base/` as appropriate. All `LISPBUILDER-SDL` symbols available in `SDL:` are exported from `sdl/`, with symbols imported into `sdl/` from `cffi/` and `base/` as appropriate (e.g. `WITH-EVENTS`). All drawing primitives are defined in this layer; circles, rectangles, lines, triangles, with-bezier etc. Functions in `sdl/` implement a lot of type checking.

An example of the difference between `base/` and `sdl/` is `WITH-RECTANGLE`. The `WITH-RECTANGLE` macro in base/ creates and destroys a foreign `SDL_Rect`. The `WITH-RECTANGLE` macro in `sdl/` will create and destroy a `RECTANGLE` object.


= Examples =

Enter the following at the REPL to compile and load the examples included in the `LISPBUILDER-SDL-EXAMPLES` package:

{{{
(asdf:operate 'asdf:load-op :lispbuilder-sdl-examples)
}}}

Run the examples by entering any of the following at the REPL:
{{{
	  (SDL-EXAMPLES:BEZIER)
	  (SDL-EXAMPLES:BMP-SAMPLE)
	  (SDL-EXAMPLES:CIRCLE-1)
	  (SDL-EXAMPLES:CIRCLE-2)
	  (SDL-EXAMPLES:CIRCLE-3)
	  (SDL-EXAMPLES:CIRCLE-4)
	  (SDL-EXAMPLES:CIRCLE-5)
	  (SDL-EXAMPLES:DISTANCE-2D)
	  (SDL-EXAMPLES:FLOOD-FILL)
	  (SDL-EXAMPLES:INBUILT-FONTS)
	  (SDL-EXAMPLES:LINE-DRAWING)
	  (SDL-EXAMPLES:MANDELBROT)
	  (SDL-EXAMPLES:METABALLS)
	  (SDL-EXAMPLES:MOUSE-2D)
	  (SDL-EXAMPLES:MOUSE-PAINTER)
	  (SDL-EXAMPLES:PIXELS-1)
	  (SDL-EXAMPLES:PIXELS-2)
	  (SDL-EXAMPLES:PIXELS-3)
	  (SDL-EXAMPLES:PIXELS-4)
	  (SDL-EXAMPLES:POINTS-AND-LINES)
	  (SDL-EXAMPLES:RANDOM-RECTS)
	  (SDL-EXAMPLES:RANDOM-BOX-1)
	  (SDL-EXAMPLES:RANDOM-BOX-2)
	  (SDL-EXAMPLES:RANDOM-BOX-3)
	  (SDL-EXAMPLES:RANDOM-BOX-4)
	  (SDL-EXAMPLES:RECURSIVE-RECTS)
	  (SDL-EXAMPLES:SETUP-AND-DRAW)
	  (SDL-EXAMPLES:SIMPLE-FONT-DEMO)
	  (SDL-EXAMPLES:STROKE)
	  (SDL-EXAMPLES:VERTICES)
	  (SDL-EXAMPLES:WIDTH-HEIGHT)
}}}