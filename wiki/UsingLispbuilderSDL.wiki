#summary LISPBUILDER-SDL User Guide
#sidebar TableOfContentsSDL

<wiki:toc max_depth="3" />

= Loading LISPBUILDER-SDL =

After [http://code.google.com/p/lispbuilder/wiki/DownloadInstallation#Download_&_Installation_of_LISPBUILDER-SDL installation] is complete, `LISPBUILDER-SDL` can be loaded as follows;

{{{
(ASDF:OPERATE 'ASDF:LOAD-OP :LISPBUILDER-SDL)
}}}

Or if you are using SLIME, enter `,` then `l` then `LISPBUILDER-SDL`

= Initializing LISPBUILDER-SDL =

lispbuilder-sdl must be initialized prior to use by calling [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-sdl INIT-SDL], 

{{{
(SDL:INIT-SDL)
}}}

or, the using the macro [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-init WITH-INIT].

{{{
(SDL:WITH-INIT()
  ...)
}}}

To close lispbuilder-sdl use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-sdl QUIT-SDL]. Using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-init WITH-INIT] will automatically close lispbuilder-sdl upon exit.

Audio, video, joystick, cdrom, and timers are separate subsystems and each must be initialized prior to use. By default the video subsystem is always initialized. If initializing video and additional subsystems, for example audio, then these subsystems must be passed as parameters to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-sdl INIT-SDL], 

{{{
(SDL:INIT-SDL '(SDL-INIT-VIDEO SDL-INIT-AUDIO)
}}}

or, [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-init WITH-INIT].

{{{
(SDL:WITH-INIT (SDL-INIT-VIDEO SDL-INIT-AUDIO)
  ...)
}}}

The list of subsystems is;

  * SDL-INIT-VIDEO
  * SDL-INIT-AUDIO
  * SDL-INIT-CDROM
  * SDL-INIT-JOYSTICK
  * SDL-INIT-TIMER
  * SDL-INIT-EVERYTHING
  * SDL-INIT-EVENTTHREAD (Don't use. Not supported on Windows)

Initialization is somewhat complicated by the fact that a Common Lisp development environment will load a foreign library once, but multiple debug sessions will initialize and close the foreign library many times. A C/C++ development environment on the other hand will open and close a library each time the program is run, thereby freeing memory and resources left hanging by incomplete or buggy initialize/close functions. Some poorly written C libraries may therefore frequently core dump in a Lisp environment when resources are not properly freed. LISPBUILDER-SDL provides functionality affording the programmer a finer granularity of control of the initialization of foreign libraries. These functions are as follows: 

  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#initialize-on-startup INITIALIZE-ON-STARTUP]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-on-exit QUIT-ON-EXIT]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#list-sub-systems LIST-SUB-SYSTEMS]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#return-sub-systems-of-status RETURN-SUB-SYSTEMS-OF-STATUS]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-sub-systems INIT-SUB-SYSTEMS]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-sub-systems QUIT-SUB-SYSTEMS]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-sdl INIT-SDL]
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-sdl QUIT-SDL]

= The Display =

Graphics are rendered to a video surface. lispbuilder-sdl allows the video surface to be configured to support the capabilities of the underlying graphical hardware as well as the types of blitting to be performed. The video surface may be configured as follows;

  * Fullscreen or Windowed,
  * Color depth (16, 24 or 32 bits per pixel), 
  * Using System or Video Memory,
  * Synchronous or Asynchronous updates,
  * Exclusive palette access, 
  * Single or Double buffering,
  * Allow OpenGL rendering,
  * Window border,
  * Having a title bar or having no window frame.

Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#window WINDOW] to create and configure the video surface on startup. Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#resize-window RESIZE-WINDOW] to modify the video surface during program execution.

{{{
window width height &key bpp flags title-caption icon-caption => result
}}}

{{{
resize-window width height &key bpp flags title-caption icon-caption => result
}}}

*Parameters*
  * `WIDTH` and `HEIGHT` are the pixel width and height of the video surface. If WIDTH and HEIGHT are both 0, then the width and height of the current video mode is used (or the desktop mode, if no mode has been set). 
  * `BPP` is the the number of bits per pixel. See the section Color Depth for more information.
  * `TITLE-CAPTION` appears in the Window title bar. 
  * `ICON-CAPTION` appears when the Window is minimized.
  * `FLAGS` is one or more of the following; 
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-sw-surface SDL-SW-SURFACE] to create the video surface in system memory,
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-hw-surface SDL-HW-SURFACE] to create the video surface in video memory, 
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-async-blit SDL-ASYNC-BLIT] update the video surface asynchronously to the main thread, 
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-any-format SDL-ANY-FORMAT], see the Section Color Depth.
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-hw-palette SDL-HW-PALETTE] sets exclusive palette access. Without this flag you may not always get the the colors you request using `SDL_SetColors` or `SDL_SetPalette`.
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-doublebuf SDL-DOUBLEBUF] will enable hardware double buffering.
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-fullscreen SDL-FULLSCREEN] will attempt to use fullscreen mode.
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-opengl SDL-OPENGL] will create an OpenGL rendering context.
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-resizable SDL-RESIZABLE] will create a resizable window, and 
  * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-no-frame SDL-NO-FRAME] creates a window with no title bar or frame decoration. Fullscreen modes automatically have this flag set.

For example;

{{{
(SDL:WINDOW 320 240 :TITLE-CAPTION "Random-Rects" :ICON-CAPTION "Random-Rects"  
                    :FLAGS '(SDL:SDL-DOUBLEBUF SDL:SDL-FULLSCREEN)) 
}}}

== Fullscreen or Windowed ==

lispbuilder-sdl will create a Windowed display by default. However this can be changed on startup or any time during program execution by passing the `SDL-FULLSCREEN` flag to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#resize-window RESIZE-WINDOW]. If a hardware resolution change is not possible the next higher resolution will be used and the display window centered on a black background.

== Color depth ==

`:BPP` defaults to 0 which is the bits-per-pixel of the current display.

If `SDL-ANY-FORMAT` is used and the requested pixel depth (`:BPP`) is unavailable, a display surface having a bits-per-pixel that matches the current display is returned. Normally, if a video surface of the requested bits-per-pixel is not available, one is emulated using shadow surface. Passing `SDL-ANY-FORMAT` prevents this and the video surface is used, regardless of the requested its pixel depth.

Note: A BPP of 24 uses the packed representation of 3 bytes/pixel. For the more common 4 bytes/pixel mode, use a BPP of 32. 

== Using System or Video Memory ==

A surface in system memory (software surface) improves the performance of pixel level access but is incompatible with some types of hardware blitting.

A surface in video memory (hardware surface) takes advantage of Video->Video blits which are often hardware accelerated.

A hardware surface (`SDL-HW-SURFACE`) must be locked prior to performing per-pixel manipulations. When locked the surface is copied from video memory to system memory and copied back when unlocked. This can cause a *major* performance hit.

Use hardware surfaces when per-pixel manipulations are not required, or when the graphics hardware supports blitting of surfaces having alpha channels.

Use software surfaces (`SDL-SW-SURFACE`) to perform per-pixel manipulations, or blit surfaces having alpha channels at a high frame rate when not supported in hardware.

Many of the drawing functions in lispbuilder-sdl require per-pixel manipulation of the destination surface; these functions include [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-bezier DRAW-BEZIER], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-curve DRAW-CURVE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-shape DRAW-SHAPE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-line DRAW-LINE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-pixel DRAW-PIXEL], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#read-pixel READ-PIXEL], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-circle, DRAW-FILLED-CIRCLE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-circle, DRAW-CIRCLE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-circle, DRAW-FILLED-CIRCLE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-trigon, DRAW-TRIGON], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-polygon, DRAW-POLYGON], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-ellipse, DRAW-ELLIPSE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-ellipse, DRAW-FILLED-ELLIPSE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-pie, DRAW-PIE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-pie, DRAW-FILLED-PIE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-trigon, DRAW-FILLED-TRIGON], and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-polygon, DRAW-FILLED-POLYGON].

If drawn directly to the display surface then the display surface must be a software surface (in system memory) or performance will be effected.

Be aware that the system may return a software surface even when a hardware surface is be requested. Many platforms can only provide a hardware surface when using `SDL-FULL-SCREEN`. `SDL-HW-SURFACE` is best used when the surfaces you'll be blitting can also be stored in video memory.

Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#video-info VIDEO-INFO] to query the capabilities of the graphics hardware.

{{{
video-info &optional info => result
}}}

`:INFO` can be one of:

  * hw-available, Is it possible to create hardware surfaces?
  * wm-available, Is there a window manager available?
  * blit-hw, Are hardware to hardware blits accelerated?
  * blit-hw-cc, Are hardware to hardware colorkey blits accelerated?
  * blit-hw-a, Are hardware to hardware alpha blits accelerated?
  * blit-sw, Are software to hardware blits accelerated?
  * blit-sw-cc, Are software to hardware colorkey blits accelerated?
  * blit-sw-a, Are software to hardware alpha blits accelerated?
  * blit-fill, Are color fills accelerated?
  * `NIL`, returns a list of all supported video flags

{{{
video-memory => result
}}}

Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#video-memory VIDEO-MEMORY] to query the amount of video memory availalble. Only makes sense if `hw-available`, otherwise returns `0`.

{{{
video-dimensions => result
}}}

[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#video-dimensions VIDEO-DIMENSIONS] returns the best video width and height if called before a window is created. Or returns the current video dimensions if called after a window is created. 

{{{
list-modes flags &optional surface => result
}}}

[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#list-modes LIST-MODES] returns a `LIST` of vectors sorted largest to smallest containing the width and height of the screen that will support the video `:FLAGS`.

Use [tbd] and [tbd] to set the x and y positions of the window.

== Synchronous or Asynchronous updates ==

== Exclusive palette access ==

== Single or Double buffering ==

== OpenGL rendering ==

== Window border ==
  * Having a title bar or having no window frame.



= Handling Events and the Game Loop =

LISPBUILDER-SDL provides the [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] macro that simplifies the game loop and handling of SDL events. Event handlers are defined by specifying the event type a well as an optional list of fields specific to that event.

More detailed information on all SDL events (Keyboard events, Joystick events, User events etc.) can be found in in the documentation for [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS]. For example, to process the current x and y mouse position when the mouse is moved:

{{{
(:MOUSE-MOTION-EVENT (:X X-POS :Y Y-POS)
  ...)
}}}

Or to process the x and y relative mouse positions when the mouse is moved:

{{{
(:MOUSE-MOTION-EVENT (:X-REL relative-x :Y-REL relative-y)
  ...)
}}}

The only event that must be handled with [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] is the `:QUIT-EVENT`. If `:QUIT-EVENT` is ignored then it is impossible for the user to close the SDL Window or exit the game loop.

{{{
(WITH-EVENTS ()
  (:QUIT-EVENT () T)
  (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
    ...))
}}}

In addition to handling events, [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] also manages the game loop. Introducing the `:IDLE` event. `:IDLE`, although not technically an actual event, is executed once per game loop after all events have been processed in the SDL event queue. `:IDLE` is where the user can place code that needs to be executed once per game loop and that is not 'event' driven. This code may involve updating world physics, updating the state of game objects and rendering sprites to the display.

{{{
(WITH-EVENTS ()
  (:QUIT-EVENT () T)
  (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
    ...)
  (:IDLE ()
    (UPDATE-DISPLAY)))
}}}

[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-events WITH-EVENTS] can also limit execution of the the game loop to a specific number of iterations a second using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#frame-rate FRAME-RATE]. This effectively limits the number of frames displayed per second. To set the frame rate to 60 frames per second, 

{{{
(SETF (FRAME-RATE) 60)
}}}

To unlock the frame rate effectively running the game loop as fast as the CPU will allow set the FRAME-RATE to `0`; 

{{{
(SETF (FRAME-RATE) 0)
}}}

The SDL display surface needs to be updated once per game loop, as described in the section [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html SDL Display].

{{{
(SETF (FRAME-RATE) 30)
(WITH-EVENTS ()
  ...)
}}}

= Default Keyword Arguments =

Many of the functions and macros defined in lispbuilder accept one or more keyword arguments. For example the function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-rectangle DRAW-RECTANGLE] accepts `:COLOR` and `:SURFACE` keyword arguments that are bound to the symbols [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] respectively. The objects that are bound to these symbols will be used unless the keyword arguments are overriden by the developer. 

The definition for [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-rectangle DRAW-RECTANGLE] is as follows:

{{{
draw-rectangle rect &key (surface *default-surface*) 
                    (color *default-color*)
                    update-p clipping-p 
}}}

So for example,

{{{
(draw-rectangle #(0 0 100 100) :COLOR (COLOR 0 0 0) :SURFACE *default-surface*)
}}}

Will render a black rectangle onto the display. However;

{{{
(draw-rectangle #(0 0 100 100))
}}}

Will render a rectangle of the color that is bound to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] onto surface that is bound to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*].

Several _convenience_ macros are defined that will bind color and surface values to variables with the same name as these global symbols. We shall explain;

The following example shows how the macro [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] binds the color black to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*].

{{{
(with-color ((COLOR 0 0 0))
  (draw-rectangle (rectangle 0 0 50 50)
  (draw-rectangle (rectangle 50 50 100 100))
}}}

Here two black rectangles are rendered onto a surface, taking advantage of the default keyword [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*]. 

But default keyword arguments have an added advantage other than keystroke savings. The macro [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] does not bind a color to the global symbol [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] but rather creates a new local variable called [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*]. The local variable in effect _shadows_ the global symbol. Thus [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] is bound to the color black ONLY within the scope of [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR]. This means we are able to nest several [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] macros creating in effect a stack. We push a new color onto the stack with each subsequent [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] and the system pops a color from the stack when a [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] goes out of scope. This is illustrated by the following example:

{{{
(with-surface (*default-display*)
  (with-color (#(0 0 0))
    (with-color (#(255 255 255))
      (draw-rectangle #(10 10 200 200)))
    (draw-rectangle #(40 40 200 100))))
}}}

This code performs the following hand-waving:

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surface WITH-SURFACE] binds the global symbol [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] to the display surface (stored in [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-display* *DEFAULT-DISPLAY*]).
 * Each call to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] creates a new *local* variable [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] and binds this to the specified color. This local variable [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] is valid only within the scope of [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR].  Each new [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] in effect 'shadows' the previous [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*].
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-rectangle DRAW-RECTANGLE] takes as keyword arguments `:COLOR` and `:SURFACE`, where `:COLOR` is bound to the local [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] and `:SURFACE` is bound to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*].

And thanks to the wonders of Lisp indentation we are able to visualize the color stack directly in the code making debugging a lot easier. 

= Optional Packages =

The LISPBUILDER-SDL core functionality can be extended by using one or more of the following packages;

  * *lispbuilder-sdl-gfx*: 2D graphical effects such as zooming, rotation, circles, polygons and squares, using [http://www.ferzkopp.net/Software/SDL_gfx-2.0/ SDL_gfx]
  * *lispbuilder-sdl-image*: Support for multiple image formats such as PNG and JPG, using [http://www.libsdl.org/projects/SDL_image/ SDL_image]
  * *lispbuilder-sdl-mixer*: Sound mixing, using [http://www.libsdl.org/projects/SDL_mixer/ SDL_mixer] a multi-channel audio mixer library
  * *lispbuilder-sdl-ttf*: True-type font rendering, using [http://www.libsdl.org/projects/SDL_ttf/ SDL_ttf]
  * *lispbuilder-sdl-net*: Networking, using [http://www.libsdl.org/projects/SDL_net/ SDL_net] a cross-platform, blocking network library.

== LISPBUILDER-SDL-GFX ==

=== Overview ===

`LISPBUILDER-SDL-GFX` provides support for the rendering of several graphics primitives directly to SDL surfaces via a native library. 

Functions and symbols exported from the LISPBUILDER-SDL-GFX package are accessible using the LISPBUILDER-SDL-GFX: prefix or the shorter form SDL-GFX: nickname. 

=== Loading LISPBUILDER-SDL-GFX ===

After [http://code.google.com/p/lispbuilder/wiki/DownloadInstallation#lispbuilder-sdl-gfx installation] is complete, `LISPBUILDER-SDL-GFX` can be loaded by entering the following at the `REPL`;

{{{
(ASDF:OPERATE 'ASDF:LOAD-OP :LISPBUILDER-SDL-GFX)
}}}

=== Loading LISPBUILDER-SDL-GFX Examples ===

Enter the following at the REPL to load the examples in the `LISPBUILDER-SDL-GFX-EXAMPLES package`;

{{{
(asdf:operate 'asdf:load-op :lispbuilder-sdl-gfx-examples)
}}}
	

The following examples are contained in the package `LISPBUILDER-SDL-GFX-EXAMPLES`: 

{{{
(SDL-GFX-EXAMPLES:RECURSION)
(SDL-GFX-EXAMPLES:METABALLS)
(SDL-GFX-EXAMPLES:POINTS-AND-LINES)
(SDL-GFX-EXAMPLES:FUNCTIONS)
(SDL-GFX-EXAMPLES:WIDTH-HEIGHT)
(SDL-GFX-EXAMPLES:INBUILT-FONT)
(SDL-GFX-EXAMPLES:BEZIER)
(SDL-GFX-EXAMPLES:VERTICES)
(SDL-GFX-EXAMPLES:SHAPE-PRIMITIVES)
(SDL-GFX-EXAMPLES:SETUP-AND-DRAW)
(SDL-GFX-EXAMPLES:DISTANCE-2D)
(SDL-GFX-EXAMPLES:RANDOM-CIRCLES)
(SDL-GFX-EXAMPLES:OBJECTS)
}}}

=== Using LISPBUILDER-SDL-GFX ===

The `LISPBUILDER-SDL-GFX` APIs have the same signature as the `LISPBUILDER-SDL` versions. See the [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#contents LISPBUILDER-SDL API Reference] for the APIs supported by `LISPBUILDER-SDL-GFX`.


== LISPBUILDER-SDL-IMAGE ==

=== Overview ===

`LISPBUILDER-SDL-IMAGE` supports the following image formats: TGA, BMP, PNM, PBM, PGM, PPM, XPM, XCF, PCX , GIF, JPG, TIF, LBM and PNG

`LISPBUILDER-SDL-IMAGE` will attempt to detect the image type and load an image using the Magic Number in the image file. For image formats that have no magic number such as targa (.TGA), [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#load-image LOAD-IMAGE] allows the image type to be specified as a parameter. 

Functions and symbols exported from the LISPBUILDER-SDL-IMAGE package are accessible using the LISPBUILDER-SDL-IMAGE: prefix or the shorter form SDL-IMAGE: nickname. 

=== Loading LISPBUILDER-SDL-IMAGE ===

After [http://code.google.com/p/lispbuilder/wiki/DownloadInstallation#lispbuilder-sdl-image installation] is complete, `LISPBUILDER-SDL-IMAGE` can be loaded by entering the following at the `REPL`;

{{{
(ASDF:OPERATE 'ASDF:LOAD-OP :LISPBUILDER-SDL-IMAGE)
}}}

=== Loading LISPBUILDER-SDL-IMAGE Examples ===

Enter the following at the REPL to load the examples in the `LISPBUILDER-SDL-IMAGE-EXAMPLES package`;

{{{
(asdf:operate 'asdf:load-op :lispbuilder-sdl-image-examples)
}}}
	

The following examples are contained in the package `LISPBUILDER-SDL-IMAGE-EXAMPLES`: 

{{{
(SDL-IMAGE-EXAMPLES:IMAGE-EXAMPLE)
}}}

=== Using LISPBUILDER-SDL-IMAGE ===

The `LISPBUILDER-SDL-IMAGE` APIs have the same signature as the `LISPBUILDER-SDL` versions. 

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#load-image LOAD-IMAGE]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#image-p IMAGE-P]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#image-type-of IMAGE-TYPE-OF]

_Note_ that external libraries must be installed for JPG, PNG and TIFF support: 

 * JPG support requires the JPEG library:
    ** http://www.ijg.org/
 * PNG support requires the PNG library, and the ZLib library:
    ** http://www.libpng.org/pub/png/libpng.html, and 
    ** http://www.gzip.org/zlib/
 * TIFF support requires the TIFF library:
    ** ftp://ftp.sgi.com/graphics/tiff/

== LISPBUILDER-SDL-TTF ==

=== Overview ===

`LISPBUILDER-SDL-TTF` provides support for the loading and rendering of True-Type fonts. 

Functions and symbols exported from the LISPBUILDER-SDL-TTF package are accessible using the `LISPBUILDER-SDL-TTF:` prefix or the shorter form `SDL-TTF:` nickname. 

The TrueType library is automatically initialized and uninitialized by the `LISPBUILDER-SDL` package. The functions [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-ttf INIT-TTF] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-ttf QUIT-TTF] are added to the lists [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*external-init-on-startup* *EXTERNAL-INIT-ON-STARTUP*] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*external-quit-on-exit* *EXTERNAL-QUIT-ON-EXIT*]. `LISPBUILDER-SDL` iterates over these lists in calls to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#init-sdl INIT-SDL], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#quit-sdl QUIT-SDL] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-init WITH-INIT] in order to initialize or uninitialize any external libraries such as `LISPBUILDER-SDL-TTF`.

=== Loading LISPBUILDER-SDL-TTF ===

After [http://code.google.com/p/lispbuilder/wiki/DownloadInstallation#lispbuilder-sdl-ttf installation] is complete, `LISPBUILDER-SDL-TTF` can be loaded by entering the following at the `REPL`;

{{{
(ASDF:OPERATE 'ASDF:LOAD-OP :LISPBUILDER-SDL-TTF)
}}}

=== Loading LISPBUILDER-SDL-TTF Examples ===

Enter the following at the REPL to load the examples in the `LISPBUILDER-SDL-TTF-EXAMPLES package`;

{{{
(asdf:operate 'asdf:load-op :lispbuilder-sdl-ttf-examples)
}}}
	

The following examples are contained in the package `LISPBUILDER-SDL-TTF-EXAMPLES`: 

{{{
(SDL-TTF-EXAMPLES:FONT-EXAMPLE)
}}}

=== Using LISPBUILDER-SDL-TTF ===

The `LISPBUILDER-SDL-TTF` APIs have the same signature as the `LISPBUILDER-TTF` versions. See the [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#contents LISPBUILDER-SDL API Reference] for the APIs supported by `LISPBUILDER-SDL-TTF`.




= Primitives =

LISPBUILDER-SDL supports [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle RECTANGLE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#color COLOR] primitives. These are described below.

== Rectangle ==

A new rectangle is created by the function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle RECTANGLE]. The function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-from-edges RECTANGLE-FROM-EDGES] will create a new rectangle from the specified top left and bottom right coordinates. The function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-from-midpoint-* RECTANGLE-FROM-MIDPOINT-*] will create a new rectangle from midpoint.

The macros [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-rectangle WITH-RECTANGLE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-rectangle WITH-RECTANGLE]s will create a new rectangle and free this rectangle when it goes out of scope. 

The rectangle position and width and height can be inspected and modified using the following functions: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x X], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y Y], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#width WIDTH] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#height HEIGHT]. [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x2 X2] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y2 Y2] will return the `(+ x width)` and `(+ y height)` of the rectangle respectively.

Additional functions that operate on rectangles are as follows:

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-point-* POINT-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-point GET-POINT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-point SET-POINT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#position POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-position GET-POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-* RECTANGLE-*] 
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-rectangle GET-RECTANGLE]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-rectangle SET-RECTANGLE]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-box DRAW-BOX]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-rectangle DRAW-RECTANGLE]

== Color ==

Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#color COLOR] to create a new `RGB` or `RGBA` color. 

`RGB/A` color componets can be manipulated using the functions [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#r R], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#g G], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#b B], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#a A], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-color SET-COLOR] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-color-* SET-COLOR-*]. Compare colors using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#color= COLOR=].

Functions that accept a color parameter will most likely bind color to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] if unspecified. The macro [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] will bind a color to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] within the scope of this macro. When [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*] is bound to a color, all subsequent drawing functions will use this implied color while it remains in scope.

Additional functions that operate on colors are as follows:

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#color-* COLOR-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#any-color-but-this ANY-COLOR-BUT-THIS]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#map-color MAP-COLOR]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#pack-color PACK-COLOR]

LISPBULDER-SDL also contains several predefined colors; 

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*black* *BLACK*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*white* *WHITE*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*red* *RED*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*green* *GREEN*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*blue* *BLUE*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*yellow* *YELLOW*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*cyan* *CYAN*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*magenta* *MAGENTA*]

= Drawing =

LISPBUILDER-SDL provides low-level drawing support for several primitives. Most primitives can be drawn with or without alpha transparency. In addition, the filled primitives can be drawn with a single pixel outline (or stroke) that is a different color to the fill color.

 * Blitting Surfaces: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-surface DRAW-SURFACE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#blit-surface BLIT-SURFACE]
 * Bezier and Cutmull-Rom Curves: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-bezier DRAW-BEZIER], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-shape DRAW-SHAPE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-bezier WITH-BEZIER], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-curve WITH-CURVE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-curve DRAW-CURVE].
 * Boxes and Rectangles: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-box DRAW-BOX], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-rectangle DRAW-RECTANGLE].
 * Circles: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-circle DRAW-CIRCLE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-filled-circle DRAW-FILLED-CIRCLE].
 * Lines: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-hline DRAW-HLINE], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-vline DRAW-VLINE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-line DRAW-LINE].
 * Points: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-pixel DRAW-PIXEL].
 * Polygons and Triangles: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-polygon DRAW-POLYGON], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-trigon DRAW-TRIGON] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-shape WITH-SHAPE].
 * Filling Surfaces with Color: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#fill-surface FILL-SURFACE]
 * Filling Arbitrary Shapes with Color: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#flood-fill FLOOD-FILL]

Drawing functions require a target surface and color. LISPBUILDER-SDL uses defaults for both target surface ([http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*]) and color ([http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-color* *DEFAULT-COLOR*]) unless these are otherwise specified by the user. The macros [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surface WITH-SURFACE], and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surfaces WITH-SURFACES] will bind a surface to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*DEFAULT-SURFACE* *DEFAULT-SURFACE*] within the scope of these macros. For example, instead of specifying a target surface for each `draw-*` function a user may bind [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*DEFAULT-SURFACE* *DEFAULT-SURFACE*] to a surface once and subsequent draw-* functions will use this surface while it remains in scope.

{{{
(DRAW-PIXEL (point :x x1 :y y1) :surface a-surface :color *white*)
(DRAW-PIXEL (point :x x2 :y y2) :surface a-surface :color *white*)	    
(DRAW-PIXEL (point :x x3 :y y3) :surface a-surface :color *white*)
(DRAW-PIXEL (point :x x4 :y y4) :surface a-surface :color *white*)
}}}

Now, we use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surface WITH-SURFACE] to bind a surface to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*DEFAULT-SURFACE* *DEFAULT-SURFACE*].

{{{
(WITH-SURFACE (a-surface)
  (DRAW-PIXEL (point :x x1 :y y1) :color *white*)
  (DRAW-PIXEL (point :x x2 :y y2) :color *white*)
  (DRAW-PIXEL (point :x x3 :y y3) :color *white*)
  (DRAW-PIXEL (point :x x4 :y y4) :color *white*))
}}}

We can use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-color WITH-COLOR] to bind [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*DEFAULT-COLOR* *DEFAULT-COLOR*] to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*white* *WHITE*]:

{{{
(WITH-SURFACE (a-surface)
  (WITH-COLOR (*white*)
    (DRAW-PIXEL (point :x x1 :y y1))
    (DRAW-PIXEL (point :x x2 :y y2))
    (DRAW-PIXEL (point :x x3 :y y3))
    (DRAW-PIXEL (point :x x4 :y y4)))
}}}

Finally, if the target surface is the display then [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#WITH-SURFACE *WITH-SURFACE*] is not required as `:SURFACE` when `NIL` will be bound to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*DEFAULT-DISPLAY* *DEFAULT-DISPLAY*] as a convenience. So the above code can be shortened as follows:

{{{
(WITH-COLOR (*white*)
  (DRAW-PIXEL (point :x x1 :y y1))
  (DRAW-PIXEL (point :x x2 :y y2))
  (DRAW-PIXEL (point :x x3 :y y3))
  (DRAW-PIXEL (point :x x4 :y y4)))
}}}

= Fonts =

LISPBUILDER-SDL contains several bitmap fonts of different sizes and faces (italics/bolded). See [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#initialise-font INITIALISE-FONT] for the complete list of built-in fonts. 

Use [http://code.google.com/p/lispbuilder/wiki/UsingLispbuilderSDL#LISPBUILDER-SDL-TTF LISPBUILDER-SDL-TTF] to load and render True-Type fonts.

== Font Initialisation ==

LISPBUILDER-SDL has the concept of a [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*]. Fonts are initialised and assigned to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*] using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#initialise-default-font INITIALISE-DEFAULT-FONT], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#initialise-font INITIALISE-FONT], or [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-open-font WITH-OPEN-FONT]. The resouces allocated to a font are freed by [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#free FREE]. A font must be initialised prior to use.

== Rendering Text ==

LISPBUILDER-SDL supports the rendering of colored text over a transparent background (Solid rendering), and the rendering of colored text over a solid colored background (Shaded rendering). Text may be left, right or center justified. Text can be drawn directly to a target surface using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-string-solid DRAW-STRING-SOLID] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-string-shaded DRAW-STRING-SHADED]. Text can be rendered to a new surface of character height and string width using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#render-string-solid RENDER-STRING-SOLID] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#render-string-shaded RENDER-STRING-SHADED]. This new surface may be optionally cached in the font object. A cached surface font can be accessed using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#cached-surface CACHED-SURFACE]) and can be blitted to a target surface using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-font DRAW-FONT].

The font rendering functions accept a font object. This font parameter is bound to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*] when unspecified. The function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#initialise-default-font INITIALISE-DEFAULT-FONT] and the macros [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-font WITH-FONT] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-default-font WITH-DEFAULT-FONT] will bind a font to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*] within the scope of these macros. When [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*] is bound to a font, all subsequent font drawing or font rendering functions that take a &KEYword or &OPTIONAL `:FONT` argument will use the font assigned to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-font* *DEFAULT-FONT*] while it remains in scope, unless a [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#font FONT] is specified. This makes calling functions a bit easier as the `:FONT` parameter need not be explicitely passed. For example: 

Compare;

{{{
(GET-FONT-SIZE "TEXT" :SIZE :W :FONT ANY-FONT)
}}}

to,

{{{
(GET-FONT-SIZE "TEXT" :SIZE :W)
}}}

The following methods also apply to fonts; [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x X], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y Y], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#width WIDTH], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#height HEIGHT], returns the width of the cached [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#surface SURFACE] when `OBJ` is a [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#font FONT].

{{{
(WITH-COLOR (*WHITE*)
  (WITH-FONT (*FONT-8x8*)
    (DRAW-STRING-SOLID-* "Font is 8x8." 10 10)

    (WITH-FONT (*FONT-10x20*)
      (DRAW-STRING-SOLID-* "Font is 10x20." 10 20))

    (DRAW-STRING-SOLID-* "Font is 8x8 again." 10 40)))
}}}	

= Surfaces =

== Overview of Surfaces ==

An SDL surface, [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#surface SURFACE], represents an area of _graphical_ memory that can be drawn or rendered to, for example the video framebuffer or an image that is loaded from disk.

== Creating Surfaces ==

A surface is created:

 * Automatically by the SDL library to represent a framebuffer by calling [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#window WINDOW].
 * When loading an image from disk using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#load-image LOAD-IMAGE].
 * Explicitely using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#create-surface CREATE-SURFACE], or [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#copy-surface COPY-SURFACE].
 * Implicitely using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#convert-surface CONVERT-SURFACE].

Functions that accept a surface parameter will most likely bind surface to [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] when unspecified. The macros [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surface WITH-SURFACE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#with-surfaces WITH-SURFACES] will bind a [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] within the scope of these macro. [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] is bound to a surface, all subsequent drawing functions will use this implied surface while it remains in scope.

A surface can be explicitely freed by calling [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#free-surface FREE-SURFACE].

== Images ==

BMP images are loaded from disk using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#load-image LOAD-IMAGE]. Support for additional image formats is provided in `LISPBUILDER-SDL-IMAGE`. A surface is saved to disk as a BMP image using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#save-image SAVE-IMAGE]

{{{
(DRAW-SURFACE (LOAD-IMAGE "sdl.bmp") 
              :surface *default-display*)
}}}

== Positioning Surfaces ==

A [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#surface SURFACE] stores its own position X/Y coordinates. These coordinates can be inspected and modified using the following functions: [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#x X], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#y Y], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#width WIDTH] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#height HEIGHT]. 

Additional functions and macros that manage surface coordinates are as follows: 

 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#point-* POINT-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-point GET-POINT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-point SET-POINT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-point-* SET-POINT-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#position-* POSITION-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-position GET-POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-position-* GET-POSITION]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-surface SET-SURFACE]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-surface-* SET-SURFACE-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#rectangle-* RECTANGLE-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-rectangle-* GET-RECTANGLE-*]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-surface-rect GET-SURFACE-RECT]
 * [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-surface-at DRAW-SURFACE-AT]

== Drawing & Blitting Surfaces ==
The functions [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#blit-surface BLIT-SURFACE] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-surface DRAW-SURFACE] will blit or draw a source surface onto a destination surface using the position coordinates stored in the source surface.[http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#draw-surface-at DRAW-SURFACE-AT] will draw the source surface at a specified position.

The composition rules that determine how the source surface is composed over the destination surface are described in the description of [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#blit-surface BLIT-SURFACE]. [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#fill-surface FILL-SURFACE] fill will the target surface with a single color. 
	  <a href="#devprim">Drawing Primitives</a> describes how [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*default-surface* *DEFAULT-SURFACE*] is used when calling blitting operations.

Use [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-color-key SET-COLOR-KEY], [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#clear-color-key CLEAR-COLOR-KEY] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-alpha SET-ALPHA] to modify the key color and alpha transparency properties of a surface after the surface has been created.

Set a _clipping_ rectangle to limit the draw area on a destination surface. The clipping rectangle for a surface is manipulated using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-clip-rect GET-CLIP-RECT] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-clip-rect SET-CLIP-RECT]. When this surface is the destination of a blit, only the area within the <em>clip</em> rectangle will be drawn into.

Set a _cell_ rectangle to limit the surface area on the source surface. The cell rectangle for a surface is manipulated using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#clear-cell CLEAR-CELL] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#set-cell SET-CELL]. When this surface is the source of a blit, only the areas within the <em>cell</em> rectangle will be used. The cell is useful when only a small area of the source surface needs to be blitted to the destination surface. For example a sequence of images composed into a single sprite sheet and only the current frame of animation is to be drawn to the display at any one time.

http://lispbuilder.googlecode.com/svn/trunk/lispbuilder-sdl/documentation/waddle.png

== Updating Surfaces and the Display ==

The functions [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#update-display UPDATE-DISPLAY] and [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#update-surface UPDATE-SURFACE] update the SDL display surface (or OpenGL context) and general SDL surfaces respectively.

= The Display =

The SDL display surface must be updated at least once each game loop using the function [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#update-display UPDATE-DISPLAY]. This function will call [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-gl-swap-buffers SDL-GL-SWAP-BUFFERS] to update the OpenGL display, [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#sdl-flip SDL-FLIP] to update the SDL surface depending on the current [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#*opengl-context* *OPENGL-CONTEXT*]. The display can be filled with a background color using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#clear-display CLEAR-DISPLAY].

The properties of an SDL surface can be queried using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#surface-info SURFACE-INFO]. The properties of the SDL display and video hardware can be queried using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#video-info VIDEO-INFO]. The screen resolutions supported by a particular set of video flags can be retrieved using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#list-modes LIST-MODES]. A pointer to the native SDL window can be retrieved using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#get-native-window GET-NATIVE-WINDOW]. The name of the video driver can be retrieved as a STRING using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#video-driver-name VIDEO-DRIVER-NAME].

= The Cursor =

The the current state of the cursor is returned using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#query-cursor QUERY-CURSOR], and is set using [http://lispbuilder.googlecode.com/svn/trunk/documentation/lispbuilder-sdl.html#query-cursor SHOW-CURSOR].

= A Simple Example =

Putting this all together, we can write short example showing a white rectangle that follows the users mouse movements within an SDL Window. Exit the example by closing the window or pressing the Esc key on the keyboard.

{{{
(WITH-INIT ()               ; Initialise SDL and the Video subsystem
  (WINDOW 320 240)          ; Open a window, 320 x 240

  (SETF (FRAME-RATE) 30)    ; Lock the frame rate to 30 fps

  (WITH-EVENTS ()
    (:QUIT-EVENT () T)      ; Absolutely have to handle the :QUIT-EVENT,
                            ; or the application will not exit.
    (:KEY-DOWN-EVENT (:KEY key) 
      (WHEN (KEY= key :SDL-KEY-ESCAPE) (PUSH-QUIT-EVENT)))

    (:MOUSE-MOTION-EVENT (:X mouse-x :Y mouse-y)
      (CLEAR-DISPLAY *black*)
      ;; Draw the box with center at the mouse x/y coordinates.
      (DRAW-BOX-* (- mouse-x (/ 50 2)) (- mouse-y (/ 50 2)) 50 50 :color *white*))

    (:IDLE ()
      (UPDATE-DISPLAY))))
}}}

= Object Lifecycles and Garbage Collection =

*TBD*	  	  

= Package Overview =

== Package Exports ==
Functions and symbols exported from the `LISPBUILDER-SDL` package are accessible using the `LISPBUILDER-SDL:` prefix or the shorter form `SDL:` nickname.

== Package Structure ==
The `cffi/` directory contains the raw CFFI bindings. These bindings may be automatically generated by [http://www.swig.org SWIG] or created by hand depending on the package. CFFI translation functions perform simple low-level conversions for example, converting Lisp strings to C strings and back (see [http://code.google.com/p/lispbuilder/source/browse/trunk/lispbuilder-sdl-image/cffi/translate.lisp `translate.lisp`] for example). 
All functions in `cffi/` accept and return foreign objects only.

The `base/` directory defines wrappers over the functions in `cffi/`. 
The functions in `base/` accept keyword arguments and accept `NIL` instead of `CFFI:NULL-POINTER` where appropriate. Generally functions in `base/` accept and return foreign objects. `base/` may perform some type checks `(IS-VALID-PTR SURFACE)` but this layer is meant to be lean. Someone who implements a graphics engine might use this layer instead of `sdl/` if speed is a concern. There are no fancy drawing primitives in this layer.

The `sdl/` directory defines the abstractions over `cffi/` and `base/`. Foreign objects are passed around `sdl/` neatly wrapped in CLOS objects, using [http://www.cliki.net/trivial-garbage `TRIVIAL-GARBAGE`] for automatic garbage collection (minimize foreign objects being left on the heap). There are no functions in `sdl/` that accept or return foreign objects (with the exception of the functions that create the CLOS wrapper objects). Functions in `sdl/` call down into `cffi/` and `base/` as appropriate. All `LISPBUILDER-SDL` symbols available in `SDL:` are exported from `sdl/`, with symbols imported into `sdl/` from `cffi/` and `base/` as appropriate (e.g. `WITH-EVENTS`). All drawing primitives are defined in this layer; circles, rectangles, lines, triangles, with-bezier etc. Functions in `sdl/` implement a lot of type checking.

An example of the difference between `base/` and `sdl/` is `WITH-RECTANGLE`. The `WITH-RECTANGLE` macro in base/ creates and destroys a foreign `SDL_Rect`. The `WITH-RECTANGLE` macro in `sdl/` will create and destroy a `RECTANGLE` object.


= Examples =

Enter the following at the REPL to compile and load the examples included in the `LISPBUILDER-SDL-EXAMPLES` package:

{{{
(asdf:operate 'asdf:load-op :lispbuilder-sdl-examples)
}}}

Run the examples by entering any of the following at the REPL:
{{{
	  (SDL-EXAMPLES:BEZIER)
	  (SDL-EXAMPLES:BMP-SAMPLE)
	  (SDL-EXAMPLES:CIRCLE-1)
	  (SDL-EXAMPLES:CIRCLE-2)
	  (SDL-EXAMPLES:CIRCLE-3)
	  (SDL-EXAMPLES:CIRCLE-4)
	  (SDL-EXAMPLES:CIRCLE-5)
	  (SDL-EXAMPLES:DISTANCE-2D)
	  (SDL-EXAMPLES:FLOOD-FILL)
	  (SDL-EXAMPLES:INBUILT-FONTS)
	  (SDL-EXAMPLES:LINE-DRAWING)
	  (SDL-EXAMPLES:MANDELBROT)
	  (SDL-EXAMPLES:METABALLS)
	  (SDL-EXAMPLES:MOUSE-2D)
	  (SDL-EXAMPLES:MOUSE-PAINTER)
	  (SDL-EXAMPLES:PIXELS-1)
	  (SDL-EXAMPLES:PIXELS-2)
	  (SDL-EXAMPLES:PIXELS-3)
	  (SDL-EXAMPLES:PIXELS-4)
	  (SDL-EXAMPLES:POINTS-AND-LINES)
	  (SDL-EXAMPLES:RANDOM-RECTS)
	  (SDL-EXAMPLES:RANDOM-BOX-1)
	  (SDL-EXAMPLES:RANDOM-BOX-2)
	  (SDL-EXAMPLES:RANDOM-BOX-3)
	  (SDL-EXAMPLES:RANDOM-BOX-4)
	  (SDL-EXAMPLES:RECURSIVE-RECTS)
	  (SDL-EXAMPLES:SETUP-AND-DRAW)
	  (SDL-EXAMPLES:SIMPLE-FONT-DEMO)
	  (SDL-EXAMPLES:STROKE)
	  (SDL-EXAMPLES:VERTICES)
	  (SDL-EXAMPLES:WIDTH-HEIGHT)
}}}

= Using OpenGL =

Example of using `LISPBUILDER-SDL` and [http://common-lisp.net/project/cl-opengl/ CL-OPENGL]

{{{
(asdf:operate 'asdf:load-op :cl-opengl)

(defun opengl-test-1 ()
  (sdl:with-init ()
    (sdl:window 250 250
                :flags sdl:sdl-opengl
                :title-caption "OpenGL Example"
                :icon-caption "OpenGL Example")
    (gl:clear-color 0 0 0 0)
    ;; Initialize viewing values.
    (gl:matrix-mode :projection)
    (gl:load-identity)
    (gl:ortho 0 1 0 1 -1 1)
    (sdl:with-events ()
      (:quit-event () t)
      (:idle ()
       (gl:clear :color-buffer-bit)
       ;; Draw white polygon (rectangle) with corners at
       ;; (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0).
       (gl:color 1 1 1)
       (gl:with-primitive :polygon
                          (gl:vertex 0.25 0.25 0)
                          (gl:vertex 0.75 0.25 0)
                          (gl:vertex 0.75 0.75 0)
                          (gl:vertex 0.25 0.75 0))
       ;; Start processing buffered OpenGL routines.
       (gl:flush)
       (sdl:update-display)))))
}}}

Use the following function to set the OpenGL attributes;

{{{
(SDL:SET-GL-ATTRIBUTE <attribute> <value>)
}}}

Use the following to gain access to OpenGL shaders, etc. Use *after* an OpenGL context is created.

{{{
(setf cl-opengl-bindings:*gl-get-proc-address* #'sdl-cffi::sdl-gl-get-proc-address)
}}}

= Creating Standalone Executables =

Tutorials for creating standalone executables using the various Common Lisp development environments;

 * [StandAloneExecutables Creating standalone executables]
 * [StandAloneCLISP CLISP executable]